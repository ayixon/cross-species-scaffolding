#!/usr/bin/env bash

# Author: Thomas Hackl - thackl@lim4.de
# Author: Jose Grau - Jose.Grau@mfn-berlin.de

# TODO: -l, -c
# TODO: mp/pe
# TODO: support multiple target libs

usage(){
cat <<EOF
Usage:
  cross-mates REF.fa TARGET-READS_1.fq [TARGET-READS_2.fq] 

Generate in-silico mate-pair libraries for super-scaffolding from target genome
(paired-end) reads and a closely related reference.
  -o   output directory [./TARGET-READS]
  -t   threads for bwa/samtools [1]
  -i   insert sizes, comma-separated [auto]
EOF
exit 0; }

SCR=`basename $0`;
DIR=`dirname $(readlink $0 || echo $0)`;
UDIR=$DIR/../util/

log(){
    echo [$(date +"%T")] $@ >&2
}
logs(){
    echo -n [$(date +"%T")] $@ >&2
}
loge(){
    echo " "$@ >&2
}

check_bin(){
    logs $1 ..
    if [[ $1 == */* ]]; then
        [ -x $1 ] || { loge failed; log "$1 not found or executable"; exit 1; }
    else
        hash $1 || { loge failed; log "$1 required in PATH"; exit 1; }
    fi;
    loge ok
}

# Execute getopt and check opts/args
ARGS=`getopt -n "$SCR" -o "t:i:h" -- "$@"`
[ $? -ne 0 ] && exit 1; # Bad arguments
eval set -- "$ARGS"

INSERTS="500,1000,1500,2000,5000,10000,20000,50000,100000,200000";
THREADS=1
OUT=''

while true; do
    case "$1" in
        -i) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); INSERTS="$2"; shift 2;;
        -t) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); THREADS="$2"; shift 2;;
        -o) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); OUT="$2"; shift 2;;
        -h) usage && exit 0;;
        --) shift; break;;
    esac
done;

# between 2 and 3 args (REF, READS, READS_2)
[ $# -lt 2 -o $# -gt 3 ] && usage;

REF=$1; shift;
REFP=$( basename ${REF%.*} );

PRE=$( basename ${1%.*} );
PRE=${PRE%_?};

[ ! -n "$OUT" ] && { OUT=$PRE; };
# leaves reads in $@

# check binaries
PATH=$UDIR/bwa:$UDIR/samtools/bin:$UDIR/bcftools:$UDIR/seq-scripts/bin:$UDIR/seqtk:$PATH;
for bin in bwa samtools bcftools vcfutils.pl seq-frag interleaved-split; do
    check_bin $bin;
done;

mkdir -p $OUT;
BAM=$OUT/$PRE.bam
CNS=$OUT/target-cns.fq
bwa index $REF;
bwa mem -t $THREADS $REF $@ | samtools view -bS - | samtools sort -@ $THREADS -o $BAM
samtools index $BAM
samtools mpileup -uf $REF $BAM | bcftools call -c | vcfutils.pl vcf2fq | seqtk seq -l0 >$CNS
IFS=',';

#{seq-frag mp -p -s -i 10000 -l 100 -c 10 <CLIB324/target-cns.fq | interleaved-split 2>&3 | cat - >1.fq; } 3>&1 1>&2 | cat - >2.fq
#seq-frag mp -p -s -i 10000 -l 100 -c 10 <CLIB324/target-cns.fq | interleaved-split >1.fq >2.fq

(for i in $INSERTS; do
     log Insert size: $i;
     echo "'""seq-frag mp -p -s -i $i -l 100 -c 10 <$CNS | interleaved-split 1>$OUT/$PRE-$i""_1.fq"" 2>$OUT/$PRE-$i""_2.fq""'"
done;) | xargs -L 1 -P $THREADS -t bash -c

unset IFS;

